# 导入numpy
import numpy as np

# 在前面一节简单介绍了numpy的ndarray创建方法，为称呼方便，后续ndarray就叫翻译名n维数组，或者简称叫作数组，

# 在前面介绍了两种生成ndarray的方法，一种是直接创建，一种是使用arange()函数创建，现在介绍更多的ndarray创建方法，

# 一.生成元素全为1或0的ndarray
# 使用ones()生成ndarray，不论输入一个数值，还是输入一个数组[i,j,k]都是生成至少一个一维数组
a1=np.ones([3])  # 生成一个元素为1的一维向量，因为只给出了一个维度，长度，默认生成向量,3或[3]是一样的
print(a1,a1.shape)
# [1. 1. 1.] (3,)
a2=np.ones([2,3])  # 给了两个维度，生成一个二维矩阵，
print(a2,a2.shape)
# [[1. 1. 1.]
#  [1. 1. 1.]] (2, 3)
a3=np.ones([3,3,2])  # 给了三个维度，生成一个三维张量，第一个是个数，有3个3行2列的矩阵
print(a3,a3.shape)
# [[[1. 1.]
#   [1. 1.]
#   [1. 1.]]
#
#  [[1. 1.]
#   [1. 1.]
#   [1. 1.]]] (2, 3, 2)
a4=np.ones([2,3,2,2])  # 4维张量，2个3维张量，每个3维张量由3个3行2列的矩阵
print(a4,a4.shape)
# [[[[1. 1.]
#    [1. 1.]]
#
#   [[1. 1.]
#    [1. 1.]]
#
#   [[1. 1.]
#    [1. 1.]]]
#
#
#  [[[1. 1.]
#    [1. 1.]]
#
#   [[1. 1.]
#    [1. 1.]]
#
#   [[1. 1.]
#    [1. 1.]]]] (2, 3, 2, 2)

# 也可以使用ones_like或zeros_like生成shape一样的ndarray
# 生成全0的不演示了，和全1的一致，就是名字不一样，ones变成了zeros,ones_like变成了zeros_like


# 二.生成一个未初始化的ndarray
# np.empty(),指定shape,指定dtype，行列优先级，C是行，F是列
b=np.empty([3,3],dtype=np.float32,order='C')
print(b)
# [[-4.1401282e+25  6.9644534e-43 -4.1401872e+25]
#  [ 6.9644534e-43 -4.1402463e+25  6.9644534e-43]
#  [-4.1403053e+25  6.9644534e-43 -4.1403643e+25]]


























